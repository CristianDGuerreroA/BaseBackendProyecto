// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewProtoNet.Data;

#nullable disable

namespace NewProtoNet.Migrations
{
    [DbContext(typeof(BaseDbContext))]
    [Migration("20230217225445_DatosFake")]
    partial class DatosFake
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CourseUser", b =>
                {
                    b.Property<int>("CoursesId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("CoursesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserCourses", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("Phone")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Melvin.Schaden@hotmail.com",
                            FullName = "Melvin Schaden",
                            Phone = 1852L
                        },
                        new
                        {
                            Id = 2,
                            Email = "Taylor_Hansen@hotmail.com",
                            FullName = "Taylor Hansen",
                            Phone = 2534L
                        },
                        new
                        {
                            Id = 3,
                            Email = "Sylvia.Boyer31@hotmail.com",
                            FullName = "Sylvia Boyer",
                            Phone = 7622L
                        },
                        new
                        {
                            Id = 4,
                            Email = "Leah.Hagenes@gmail.com",
                            FullName = "Leah Hagenes",
                            Phone = 7955L
                        },
                        new
                        {
                            Id = 5,
                            Email = "Pablo.Mayert53@hotmail.com",
                            FullName = "Pablo Mayert",
                            Phone = 906L
                        },
                        new
                        {
                            Id = 6,
                            Email = "Ronnie.Ward@gmail.com",
                            FullName = "Ronnie Ward",
                            Phone = 8791L
                        },
                        new
                        {
                            Id = 7,
                            Email = "Erin_Ortiz15@hotmail.com",
                            FullName = "Erin Ortiz",
                            Phone = 3342L
                        },
                        new
                        {
                            Id = 8,
                            Email = "Eula_Kessler41@gmail.com",
                            FullName = "Eula Kessler",
                            Phone = 197L
                        },
                        new
                        {
                            Id = 9,
                            Email = "Edwin.Cummerata14@hotmail.com",
                            FullName = "Edwin Cummerata",
                            Phone = 5177L
                        },
                        new
                        {
                            Id = 10,
                            Email = "Ramon.Keeling@gmail.com",
                            FullName = "Ramon Keeling",
                            Phone = 7522L
                        });
                });

            modelBuilder.Entity("CourseUser", b =>
                {
                    b.HasOne("Domain.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Course")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("Course");
                });
#pragma warning restore 612, 618
        }
    }
}
